using System.Net.WebSockets;
using System.Text;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebAppMR.Data;
using WebAppMR.Services;

[ApiController]
[Route("api/[controller]")]
public class AuthenticationController : ControllerBase
{
    private readonly ILogger<AuthenticationController> _logger;
    private readonly ApplicationDbContext _context;
    private readonly WebSocketConnectionManager _webSocketManager;

    public AuthenticationController(ILogger<AuthenticationController> logger, ApplicationDbContext context, WebSocketConnectionManager webSocketManager)
    {
        _context = context;
        _logger = logger;
        _webSocketManager = webSocketManager;
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginModel request)
    // Removed dispatcher assignment
    {
        // This is a placeholder for authentication logic.
        // In a real application, you would validate credentials and issue tokens.
        if (string.IsNullOrEmpty(request.Username) || string.IsNullOrEmpty(request.Password))
        {
            return BadRequest(new { Message = "Username and password are required" });
        }
        var allUserIds = _webSocketManager.GetAllUserIds();
        _logger.LogInformation("Checking user activation status for {Count} sockets", allUserIds.Count());
        List<string> usersActivated = new List<string>();
        List<Task<string?>> handleTasks = new();

        foreach (var userId in allUserIds)
        {
            var socket = _webSocketManager.GetSocket(userId);
            var dispatcher = _webSocketManager.GetDispatcher(userId);
            if (socket != null && dispatcher != null)
            {
                handleTasks.Add(HandleSocket(socket, dispatcher));
            }
        }
        var results = await Task.WhenAll(handleTasks); // Chờ tất cả clients xử lý song song
        foreach (var result in results)
        {
            if (!string.IsNullOrEmpty(result))
            {
                usersActivated.AddRange(result.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries));
            }
        }
        Console.WriteLine($"Users activated: {string.Join(", ", usersActivated ?? new List<string>())}");
        // Kiểm tra xem user đã được kích hoạt chưa
        if (usersActivated != null && usersActivated.Contains(request.Username))
        {
            return Unauthorized(new { Message = "User is activated" });
        }
        else if (usersActivated == null)
        {
            _logger.LogWarning("Users activated list is null");
            return Unauthorized(new { Message = "Users activated list is null" });
        }
        else
        {
            _logger.LogInformation("User {Username} is not activated", request.Username);
        }
        // Validate the credentials with your user store (e.g., database)
        var user = await _context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Name == request.Username);
        if (user == null || user.PasswordHash != Convert.ToHexStringLower(System.Security.Cryptography.SHA256.HashData(System.Text.Encoding.UTF8.GetBytes(request.Password))))
        {
            return Unauthorized(new { Message = "Invalid username or password" });
        }
        // If credentials are valid, return a success response
        _logger.LogInformation("User {Username} logged in successfully", request.Username);
        return Ok(new { Message = "Login successful" });
    }
    private async Task<string?> HandleSocket(WebSocket socket, WebSocketMessageDispatcher dispatcher)
    {
        if (socket.State != WebSocketState.Open)
            return null;

        var message = "getUsersActivated";
        var bytes = Encoding.UTF8.GetBytes(message);
        await socket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);

        var response = await dispatcher.WaitForResponseAsync(TimeSpan.FromSeconds(5));
        Console.WriteLine("Received from client: " + response);
        return response;
    }
    [HttpPost("register")]
    public async Task<IActionResult> Register([FromBody] UserModel user, CancellationToken cancellationToken = default)
    {
        if (user == null || string.IsNullOrEmpty(user.Name) || string.IsNullOrEmpty(user.Password))
        {
            return BadRequest(new { Message = "Invalid user data" });
        }
        // Hash the password (in a real application, use a secure hashing algorithm) 
        var hashBytes = System.Security.Cryptography.SHA256.HashData(System.Text.Encoding.UTF8.GetBytes(user.Password ?? string.Empty));
        var passwordHash = Convert.ToHexStringLower(hashBytes);

        user.Id = 0; // Set Id to 0 for new user, it will be generated by the database
                     // Check if the user already exists
        if (await _context.Users.AnyAsync(u => u.Name == user.Name, cancellationToken))
        {
            return Conflict(new { Message = "User already exists" });
        }

        var userEntity = new User
        {
            Name = user.Name,
            PasswordHash = passwordHash
        };
        _context.Users.Add(userEntity);
        await _context.SaveChangesAsync(cancellationToken);

        // Return a DTO without password hash
        return CreatedAtAction(nameof(Register), new { id = userEntity.Id }, new { userEntity.Id, userEntity.Name });
    }
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteUser(int id, CancellationToken cancellationToken = default)
    {
        var user = await _context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == id, cancellationToken);
        if (user == null)
        {
            return NotFound(new { Message = "User not found" });
        }

        _context.Users.Remove(new User { Id = id });
        await _context.SaveChangesAsync(cancellationToken);

        return NoContent();
    }
    public class UserModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}